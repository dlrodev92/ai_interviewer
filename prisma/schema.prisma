generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model InterviewTokenTransaction {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Int      
  interviewId   String?   
  description   String
  createdAt     DateTime  @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String    @id @default(uuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFirstTimeUser       Boolean   @default(true)
  hasWatchedTutorial    Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  authProvider  String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  settings      UserSettings?
  tokenTransactions InterviewTokenTransaction[]
  interviewTokenBalance  Int       @default(3)
  interviewFeedbacks    InterviewFeedback[]
}


model InterviewFeedback {
  id            String                  @id @default(cuid())
  title         String
  date          DateTime                @default(now())
  duration      Int                    
  type          String                  
  overallScore  Float
  summary       String                  @db.Text
  recordingUrl  String?                 
  hasTranscript Boolean                 @default(false)
  hasRecording  Boolean                 @default(false)
  
 
  userId        String
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories    FeedbackCategory[]
  strengths     FeedbackStrength[]
  improvements  FeedbackImprovement[]
  transcript    TranscriptEntry[]       
  interviewId   String?                 
  
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([userId])
}


model FeedbackCategory {
  id             String             @id @default(cuid())
  name           String             
  score          Float              
  description    String             @db.Text
  
  feedbackId     String
  feedback       InterviewFeedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([feedbackId])
}


model FeedbackStrength {
  id             String             @id @default(cuid())
  text           String             @db.Text
  

  feedbackId     String
  feedback       InterviewFeedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime           @default(now())

  @@index([feedbackId])
}

model FeedbackImprovement {
  id             String             @id @default(cuid())
  text           String             @db.Text
  

  feedbackId     String
  feedback       InterviewFeedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime           @default(now())

  @@index([feedbackId])
}


model TranscriptEntry {
  id             String             @id @default(cuid())
  speaker        String             
  text           String             @db.Text
  timestamp      String             
  

  feedbackId     String
  feedback       InterviewFeedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  
  orderIndex     Int
  createdAt      DateTime           @default(now())

  @@index([feedbackId])
  @@index([feedbackId, orderIndex]) 
}

model AnonymousFeedback {
  id                       String   @id @default(cuid())
  usabilityRating          Int?
  interviewQualityRating   Int?
  feedbackHelpfulnessRating Int?
  overallExperienceRating  Int?
  recommendLikelihoodRating Int?
  comments                 String?  @db.Text
  submittedAt              DateTime @default(now())
  
  @@map("anonymous_feedback")
}